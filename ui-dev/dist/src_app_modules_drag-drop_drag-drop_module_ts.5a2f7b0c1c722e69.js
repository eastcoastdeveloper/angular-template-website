"use strict";(self.webpackChunkFrontendDev=self.webpackChunkFrontendDev||[]).push([["src_app_modules_drag-drop_drag-drop_module_ts"],{6014:(v,l,a)=>{a.r(l),a.d(l,{DragDropModule:()=>s});var m=a(6895),p=a(9965),e=a(8256);const u=["newDirectory"],g=["newGroup"],c=["typeName"];class n{ngOnInit(){this.renderCode()}renderCode(){this.snippetOne="items.push({ title: this.itemTitle })",this.snippetTwo="{title: 'colors'}, {title: 'cities'}",this.snippetThree="{title: itemTitle}, {title: itemTitle}. itemAdded()",this.snippetFour="[{active: false}, {active: false}, {active: false}, {active: false}, ...]",this.snippetFive="{active: true}",this.json='\n    {\n      "unsortedItems": [\n        {\n          "items": [\n            { "name": "Orange"     },\n            { "name": "Apple"      },\n            { "name": "Pear"       },\n            { "name": "Watermelon" },\n            { "name": "Kiwi"       },\n            { "name": "Banana"     },\n            { "name": "Papya"      }\n          ]\n        },\n        {\n          "items": [\n            { "name": "Ford"   },\n            { "name": "Honda"  },\n            { "name": "Chevy"  },\n            { "name": "Nissan" },\n            { "name": "Tesla"  },\n            { "name": "Toyota" },\n            { "name": "Opel"   }\n          ]\n        },\n        {\n          "items": [\n            { "name": "Los Angeles"  },\n            { "name": "Chicago"      },\n            { "name": "New York"     },\n            { "name": "Indianapolis" },\n            { "name": "Miami"        },\n            { "name": "Phoenix"      },\n            { "name": "Boise"        }\n          ]\n        },\n        {\n          "items": [\n            { "name": "blue"      },\n            { "name": "red"       },\n            { "name": "purple"    },\n            { "name": "turquoise" },\n            { "name": "green"     },\n            { "name": "pink"      },\n            { "name": "maroon"    }\n          ]\n        },\n        {\n          "items": [\n            { "name": "dog"     },\n            { "name": "cat"     },\n            { "name": "monkey"  },\n            { "name": "lizard"  },\n            { "name": "bear"    },\n            { "name": "wolf"    },\n            { "name": "giraffe" }\n          ]\n        },\n        {\n          "items": [\n            { "name": "sunday"    },\n            { "name": "monday"    },\n            { "name": "tuesday"   },\n            { "name": "wednesday" },\n            { "name": "thursday"  },\n            { "name": "friday"    },\n            { "name": "saturday"  }\n          ]\n        }\n      ]\n    }',this.interface="\n    export class ItemResponse {\n      [index: number]: { items: { name: string }[] };\n    }",this.typescript="\n    items: { title: string }[] = [];\n    groupItem: string;\n    groupIndex: any;\n    result: any = [];\n    uploadedCount: any[] = [];\n    itemTitle: string;\n    itemName: string;\n    addNewItem: { active: boolean }[] = [];\n    itemIndex: string;\n    namedElements: any = [];\n    directoryElements: any;\n    draggedItem: any;\n    draggedElement: any;\n  \n    @ViewChildren('typeName') typeName: QueryList<ElementRef[]>;\n    @ViewChild('newDirectory', { static: false }) newDirectory: ElementRef;\n    @ViewChild('newGroup', { static: false }) newGroup: ElementRef;\n  \n    constructor(private _http: HttpClient) {\n      // Get JSON\n      // Import HttpClientModule to the Parent Module\n      this._http.get<Response[]>('assets/unsorted.json').subscribe(val => {\n        this.result = val;\n        this.setInputBooleans();\n      });\n    }\n  \n    // Array's same length as JSON...Hides Add New Name Field\n    setInputBooleans() {\n      this.addNewItem.push({ active: false });\n    }\n  \n    // Add Dragstart Evt to All\n    dragStartHandler(e: any) {\n      this.groupIndex = e.target.dataset.group;\n      this.itemIndex = e.target.dataset.name;\n      this.draggedElement = e.target;\n      this.draggedItem = this.draggedElement.querySelector('p').innerText;\n      this.draggedElement.classList.add('dragging');\n      this.collectDropZones();\n    }\n  \n    dragEndHandler(e: any) {\n      this.draggedElement.classList.remove('dragging');\n    }\n  \n    // From UI to Drop Zones\n    collectDropZones() {\n      this.directoryElements = Array.from(\n        document.querySelectorAll('.child-container .drop-zone')\n      );\n      this.directoryElements.forEach((val: any, i: number) => {\n        // Drag Leave Event\n        val.addEventListener('dragleave', () => {\n          this.removeActiveDropZone(val);\n        });\n        // Drag Over Event\n        val.addEventListener('dragover', (e: any) => {\n          e.preventDefault();\n          val.classList.add('drag-zone-active');\n        });\n        // Drop Event\n        val.addEventListener('drop', (e: any) => {\n          // Kill Other Events\n          e.stopImmediatePropagation();\n          this.removeActiveDropZone(val);\n          this.result[this.groupIndex].items.splice([this.itemIndex], 1);\n          let elem = document.createElement('li');\n          elem.setAttribute('data-groupIndex', this.groupIndex);\n\n          elem.innerHTML = '<p>' + this.draggedItem + \"</p><div class='named-elem'><span>&#x293A;</span></div>\";\n          val.parentElement.querySelector('.dragged-items').appendChild(elem);\n          this.namedElements = Array.from(document.querySelectorAll('.named-elem'));\n\n          this.namedElements.forEach((elem: any, indice: number) => {\n            elem.addEventListener('click', (e: any) => {\n              this.uploadedCount[i] = Array.from(val.parentElement.querySelectorAll('.dragged-items li'));\n              e.target.parentElement.parentElement.remove();\n              e.stopImmediatePropagation();\n              let groupI = e.target.parentElement.parentElement.dataset.groupindex;\n              this.result[groupI].items.push({name: e.target.parentElement.parentElement.querySelector('p').innerText});\n              this.namedElements = Array.from(document.querySelectorAll('.named-elem'));\n              this.uploadedCount[i].pop();\n            });\n          });\n        });\n      });\n    }\n  \n    toggleBlock(i: number) {\n      this.directoryElements = Array.from(\n        document.querySelectorAll('.child-container .drop-zone')\n      );\n      let elem = this.directoryElements[i].parentElement.querySelector('.toggle-block'),\n         arrow = this.directoryElements[i].parentElement.querySelector('.toggle-block .arrow');\n      \n      elem.classList.toggle('close-block');\n      arrow.classList.toggle('rotate-arrow');\n    }\n  \n    // Stop Drop Active Indicator\n    removeActiveDropZone(elem: any) {\n      elem.classList.remove('drag-zone-active');\n    }\n  \n    // Add New Directory/Dropzone\n    itemAdded() {\n      if (this.itemTitle != undefined) {\n        this.newDirectory.nativeElement.classList.remove('required-field');\n        this.items.push({ title: this.itemTitle });\n        this.itemTitle = '';\n        this.removeInputs();\n      } else {\n        this.newDirectory.nativeElement.classList.add('required-field');\n      }\n      this.itemTitle = undefined;\n    }\n  \n    // Delete Directory/Dropzone\n    // Return Elems to Groups\n    deleteItem(i: number) {\n      this.items.splice(i, 1);\n      this.uploadedCount.splice(i, 1);\n      let cContainer = document.querySelector('.child-container .toggle-block ul');\n      if (cContainer.innerHTML != '') {\n        let arr = Array.from(cContainer.querySelectorAll('li'));\n        for (var i = 0; i < arr.length; i++) {\n          let groupI = arr[i].dataset.groupindex;\n          this.result[groupI].items.push({\n            name: arr[i].querySelector('p').innerText,\n          });\n        }\n      }\n    }\n  \n    // Delete Dragable\n    deleteName(i: number, j: number) {\n      this.result[i].items.splice(j, 1);\n      this.typeName.length - 1;\n      this.removeInputs();\n    }\n  \n    // Add New Dragable Group\n    addGroup() {\n      if (this.itemName != undefined) {\n        this.newGroup.nativeElement.classList.remove('required-field');\n        this.result.push({items: [{ name: this.itemName }]});\n        this.itemName = '';\n        this.setInputBooleans();\n        this.removeInputs();\n      } else {\n        this.newGroup.nativeElement.classList.add('required-field');\n      }\n      this.itemName = undefined;\n    }\n  \n    // Add New Drop Zone on Enter\n    getKeyCode(e: any) {\n      e.code === 'Enter' ? this.itemAdded() : '';\n    }\n  \n    // Add New Group on Enter\n    addGroupKeyCode(e: any) {\n      e.code === 'Enter' ? this.addGroup() : '';\n    }\n  \n    // Add New Item on Enter\n    addNewItemField(e: any, i: number) {\n      e.code === 'Enter' ? this.pushNamedItem(i) : '';\n    }\n  \n    addNamedItem(i: number) {\n      this.removeInputs();\n      this.addNewItem[i].active = true;\n    }\n  \n    pushNamedItem(i: number) {\n      this.groupItem.length > 10 ? (this.groupItem = this.groupItem.slice(0, 10) + ' . . .') : '';\n      this.result[i].items.push({ name: this.groupItem });\n      this.groupItem = undefined;\n      this.addNewItem[i].active = false;\n    }\n  \n    // Hide Input Fields\n    removeInputs() {\n      this.addNewItem.forEach((val: any) => {\n        val.active = false;\n      });\n    }\n  }",this.markup='\n    <div class="wrapper">\n    <header [ngClass]="{ \'border-btm\': items.length > 0 }">\n      <p>Drag-Drop UI</p>\n      <small>&mdash;&nbsp;&nbsp;No Libraries or Packages&nbsp;&nbsp;&mdash;</small>\n      <div class="add-btn">Add Directory</div>\n      <div class="add-new">\n        <input placeholder="Add directory name" #newDirectory [(ngModel)]="itemTitle" (keydown)="getKeyCode($event)"/>\n        <button (click)="itemAdded()">Add</button>\n      </div>\n    </header>\n    <div class="selected-content" [ngClass]="{ hasDirectories: items.length > 0 }">\n      <div class="child-container" *ngFor="let item of items; let i = index" id="{{ \'group\' + i }}">\n        <hr />\n        <p class="group-index">{{ items[i].title }}</p>\n        <div class="delete" (click)="deleteItem(i)">\n          <i>&times;</i>\n          <div class="faux-btn"></div>\n        </div>\n        <div class="drop-zone">\n          <p class="ddText">Drag & Drop</p>\n        </div>\n        <div class="toggle-block">\n          <p *ngIf="uploadedCount[i] != undefined && uploadedCount[i].length > 0">\n            {{ uploadedCount[i].length }} Items\n          </p>\n          <ul class="dragged-items"></ul>\n          <span (click)="toggleBlock(i)" class="arrow" *ngIf="uploadedCount[i] != undefined && uploadedCount[i].length > 0">\n            &#9660;\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class="add-btn group">Add Group Item</div>\n    <div class="add-new mr-20">\n      <input placeholder="Add group item" (keydown)="addGroupKeyCode($event)" [(ngModel)]="itemName" #newGroup class="mt-10"/>\n      <button (click)="addGroup()" class="mt-10">Add</button>\n    </div>\n    <div class="unsorted">\n      <div *ngFor="let items of result; let i = index">\n        <div\n          *ngFor="let type of result[i].items; let j = index"\n          draggable="true"\n          (dragstart)="dragStartHandler($event)"\n          (dragend)="dragEndHandler($event)"\n          #typeName\n          [attr.data-group]="i"\n          [attr.data-name]="j"\n        >\n          <div>\n            <p>{{ type.name }}</p>\n            <span>&times;</span>\n            <div class="delete-item" (click)="deleteName(i, j)"></div>\n          </div>\n        </div>\n        <div class="add-new-name" *ngIf="result[i].items.length > 0">\n          <span (click)="addNamedItem(i)">&#43;</span>\n          <div class="add-new" *ngIf="addNewItem[i].active">\n            <input placeholder="Add new item" [(ngModel)]="groupItem" (keydown)="addNewItemField($event, i)"/>\n            <button (click)="pushNamedItem(i)">Add</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>',this.scss="\n  .wrapper {\n    font-family: Lato;\n    background-color: lightgrey;\n    max-width: 1000px;\n    margin: 0 auto;\n    .add-btn {\n      float: left;\n      color: #fff;\n      font-size: 17px;\n      padding: 3px 10px 4px 10px;\n      border-radius: 4px;\n      margin-left: 10px;\n      background-color: #333;\n      width: 150px;\n      text-align: center;\n    }\n    .group {\n      margin-left: 20px;\n      margin-top: 10px;\n    }\n    header {\n      background-color: lightgray;\n      overflow: auto;\n      padding: 10px;\n      position: relative;\n      p {\n        line-height: 36px;\n        color: #333;\n        font-size: 20px;\n        text-align: center;\n        margin: 20px 0 0 10px;\n      }\n      small {\n        margin-bottom: 20px;\n        display: block;\n        text-align: center;\n        font-style: italic;\n        font-family: inherit;\n      }\n    }\n    .selected-content {\n      background-color: lightgray;\n      display: grid;\n      grid-template-columns: repeat(2, calc(50% - 5px));\n      grid-gap: 20px;\n      max-width: 1000px;\n      margin: 0 auto;\n      .child-container {\n        min-height: 50px;\n        background-color: #333;\n        border-radius: 4px;\n        color: #fff;\n        padding-top: 25px;\n        position: relative;\n        max-width: 500px;\n        padding-bottom: 10px;\n        hr {\n          margin-top: 22px;\n        }\n        .group-index {\n          text-transform: uppercase;\n          font-size: 14px;\n          margin: 0;\n          padding-left: 10px;\n          padding-bottom: 5px;\n          position: absolute;\n          top: 15px;\n        }\n        .dragged-items {\n          list-style-type: none;\n          line-height: 25px;\n          padding: 0 0 0 30px;\n          ::ng-deep {\n            li {\n              overflow: auto;\n              padding-right: 15px;\n              margin: 5px 0;\n              p {\n                margin: 0;\n                float: left;\n              }\n              div {\n                float: right;\n                position: relative;\n                border: 1px solid white;\n                width: 25px;\n                height: 25px;\n                border-radius: 4px;\n                cursor: pointer;\n                span {\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  transform: translate(-50%, -60%);\n                  font-weight: bold;\n                  font-size: 20px;\n                  transition: transform 0.25s;\n                }\n              }\n            }\n          }\n        }\n        .rotate-arrow {\n          transform: rotate(-90deg) !important;\n        }\n        .toggle-block {\n          position: relative;\n          transition: all 0.2s;\n          max-height: 500px;\n          overflow: hidden;\n          p {\n            margin: 0 0 0 10px;\n            transform: translateY(5px);\n          }\n          span {\n            position: absolute;\n            top: 0;\n            right: 15px;\n            border-radius: 3px;\n            border: 1px solid white;\n            padding: 4px;\n            cursor: pointer;\n          }\n        }\n        .close-block {\n          max-height: 30px;\n        }\n      }\n      .drop-zone {\n        height: 50px;\n        margin-top: 20px;\n        border: 3px dashed;\n        margin: 30px 10px 20px 10px;\n        border-radius: 4px;\n        display: flex;\n        .ddText {\n          margin: auto;\n          font-size: 14px;\n          text-transform: uppercase;\n        }\n      }\n    }\n    .hasDirectories {\n      padding: 20px 20px 10px 20px;\n    }\n    .border-btm {\n      border-bottom: 1px solid #333;\n    }\n    .delete {\n      background-color: lightgray;\n      position: absolute;\n      width: 25px;\n      height: 25px;\n      top: 10px;\n      right: 10px;\n      display: flex;\n      border: 1px solid white;\n      border-radius: 2px;\n      i {\n        margin: auto;\n        font-size: 25px;\n        color: #333;\n        transform: translate(-1px, -4px);\n      }\n      .faux-btn {\n        position: absolute;\n        width: 25px;\n        height: 25px;\n        cursor: pointer;\n      }\n    }\n    .unsorted {\n      display: flex;\n      clear: left;\n      position: relative;\n      flex-wrap: wrap;\n      max-width: 1000px;\n      margin: 50px auto 0 auto;\n      padding: 0 0 20px 10px;\n      text-transform: capitalize;\n      > div {\n        margin-bottom: 30px;\n      }\n      [data-group] {\n        position: relative;\n        margin: 10px;\n        span {\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n          right: 14px;\n          color: white;\n          cursor: pointer;\n        }\n      }\n      .add-new-name {\n        background-color: #1b9e61;\n        position: absolute;\n        width: 30px;\n        border-radius: 4px;\n        margin-left: 10px;\n        display: flex;\n        cursor: pointer;\n        span {\n          color: white;\n          margin: auto;\n          font-size: 20px;\n        }\n        .add-new {\n          position: absolute;\n          top: 30px;\n          left: 0;\n          z-index: 1;\n          background-color: lightgrey;\n          border: 1px solid #333;\n          padding: 10px;\n          border-radius: 4px;\n          box-shadow: 2px 2px 5px 3px rgba(0, 0, 0, 0.4);\n        }\n      }\n      .delete-item {\n        width: 16px;\n        height: 17px;\n        position: absolute;\n        top: 10.5px;\n        right: 10px;\n        border-radius: 2px;\n        border: 1px solid white;\n        cursor: pointer;\n      }\n      p {\n        background-color: #333;\n        padding: 10px;\n        color: white;\n        border-radius: 4px;\n        cursor: move;\n        width: 125px;\n        transition: all 0.25s;\n      }\n    }\n    .dragging p {\n      opacity: 0.5;\n      transform: scale(1.1);\n    }\n    .add-new {\n      display: flex;\n      float: right;\n      margin-right: 10px;\n      input {\n        border: none;\n        height: 26px;\n        outline: none;\n        font-size: 14px;\n        width: 200px;\n        padding-left: 5px;\n        border-top-left-radius: 4px;\n        padding: 0 0 0 5px;\n        border-bottom-left-radius: 4px;\n        margin-right: 5px;\n      }\n      button {\n        height: 28px;\n        border: none;\n        outline: none;\n        border-radius: 4px;\n        font-size: 14px;\n        cursor: pointer;\n      }\n    }\n    .drag-zone-active {\n      background-color: mediumturquoise;\n      color: #333;\n      border-color: lightgrey !important;\n    }\n    .required-field {\n      background-color: #b33a3a;\n      color: white;\n    }\n    .required-field::placeholder {\n      color: white;\n    }\n  }"}static#e=this.\u0275fac=function(i){return new(i||n)};static#t=this.\u0275cmp=e.Xpm({type:n,selectors:[["app-drag-drop-ui"]],viewQuery:function(i,t){if(1&i&&(e.Gf(u,5),e.Gf(g,5),e.Gf(c,5)),2&i){let r;e.iGM(r=e.CRH())&&(t.newDirectory=r.first),e.iGM(r=e.CRH())&&(t.newGroup=r.first),e.iGM(r=e.CRH())&&(t.typeName=r)}},decls:80,vars:9,consts:[[1,"snippet-description"],["href","https://drag-and-drop-javascript.stackblitz.io/","target","_blank"],[1,"js-drag-drop","element-shadow"],["src","assets/components-grid/js-drag-drop.jpg"],[1,"snippet-description","item-margin"],[1,"code-preview"],[1,"snippet-description","item-last-child"],["href","https://stackblitz.com/edit/drag-and-drop-javascript?file=src%2Fapp%2Fapp.component.ts","target","_blank"]],template:function(i,t){1&i&&(e.TgZ(0,"div",0),e._uU(1," Not long ago I was tasked with creating a complex JavaScript drag and drop UI. One in which users gave users the ability to move multiple items at once. This was a feature I'd never done prior. And this was a project I was the lead frontend developer for. Additionally, the client was the United States Senate. Not only would members of Congress be using a UI I created, but every mouse or hand gesture was a POST request."),e._UZ(2,"br")(3,"br"),e._uU(4,"Most of which is irrelevant. I'm a developer, and therefore need to ensure that whatever I build, works flawlessly for whoever it's regardless of the client. I wanted to be 100% prepared for the upcoming task. In turn, I created this UI. Though far from exact, it demonstrates creative drag abilities via JSON content. "),e.TgZ(5,"a",1),e._uU(6,"Working demo here."),e.qZA(),e._uU(7," Code analysis below."),e._UZ(8,"br")(9,"br"),e.qZA(),e.TgZ(10,"div",2),e._UZ(11,"img",3),e.qZA(),e.TgZ(12,"div",4),e._uU(13," Let's begin with the data. Though this is in Angular, it could very well be isolated to just vanilla JavaScript with an index.html and script file. Don't be deterred simply because you may be most comfortable in React or Vue. This is the data that populates the UI.\n"),e.qZA(),e.TgZ(14,"div",5)(15,"pre"),e._uU(16,"\t\t    "),e.TgZ(17,"code"),e._uU(18),e.qZA(),e._uU(19,"\n\t    "),e.qZA()(),e.TgZ(20,"div",4),e._uU(21," Create an interface of the data.\n"),e.qZA(),e.TgZ(22,"div",5)(23,"pre"),e._uU(24,"\t\t    "),e.TgZ(25,"code"),e._uU(26),e.qZA(),e._uU(27,"\n\t    "),e.qZA()(),e.TgZ(28,"div",4),e._uU(29," app.component.ts "),e.TgZ(30,"ul")(31,"li"),e._uU(32),e.qZA(),e.TgZ(33,"li"),e._uU(34,"groupItem is the same thing, but for a new group item. In the event we'd like to add a new value to the UI. A value we'd like to then drag somewhere. Enter something in that field, and it'll appear as list value to be dragged."),e.qZA(),e.TgZ(35,"li"),e._uU(36,"groupIndex on the other hand is the unsortedItems array indice. Picking up Honda would make the groupIndex 1. Dragging Orange, groupIndex is 0. Dragging blue, groupIndex is 3."),e.qZA(),e.TgZ(37,"li"),e._uU(38,"result holds the incoming JSON data."),e.qZA(),e.TgZ(39,"li"),e._uU(40,'uploadedCount signifies how the elements are currently "uploaded". Afterall, this JavaScript drag and drop is a mock file uploader. This array contains references to the elements in each "directory".'),e.qZA(),e.TgZ(41,"li"),e._uU(42),e.qZA(),e.TgZ(43,"li"),e._uU(44,"itemName is a value that's captured from the template via ngModel. It's a banana in a boat [()] meaning two way data binding. In turn, when a value's entered in the 'Add Group Name' field, it flows to the model."),e.qZA(),e.TgZ(45,"li"),e._uU(46),e.qZA(),e.TgZ(47,"li"),e._uU(48,"itemIndex helps to determine which named item was moved from the items array."),e.qZA(),e.TgZ(49,"li"),e._uU(50,'namedElements is an array of HTML elements housed in each "directory".'),e.qZA(),e.TgZ(51,"li"),e._uU(52,'directoryElements is an array of "directory" drop zones. When we drag, directoryElements sends up a flag saying, "hey, these are the available drop zones."'),e.qZA(),e.TgZ(53,"li"),e._uU(54,"draggedItem is the raw text of the current item being dragged."),e.qZA(),e.TgZ(55,"li"),e._uU(56,"draggedElement is the HTML element in full."),e.qZA()()(),e.TgZ(57,"div",5)(58,"pre"),e._uU(59,"\t\t"),e.TgZ(60,"code"),e._uU(61),e.qZA(),e._uU(62,"\n\t"),e.qZA()(),e.TgZ(63,"div",4),e._uU(64," app.component.scss\n"),e.qZA(),e.TgZ(65,"div",5)(66,"pre"),e._uU(67,"\t\t    "),e.TgZ(68,"code"),e._uU(69),e.qZA(),e._uU(70,"\n\t    "),e.qZA()(),e._UZ(71,"br"),e.TgZ(72,"div",6),e._uU(73," There's no way around it. If you're creating a UI like this without a library, it's gonna be complex. Plus, factoring in POST requests at every drop like my project called for... Though many would advocate using a library, I try to avoid using libs whenever possible. Especially if it calls for custom solutions. You'll spend more time trying to get the lib to mimic the intended behavior vs creating a system of your own."),e._UZ(74,"br")(75,"br"),e._uU(76,"This could no doubt be improved with more specified data types, but time was of the essence when I built a low-fi mock. One in which to emulate an actual feature in a proprietary application. If you need a working version of this JavaScript drag and drop UI, see the demo "),e.TgZ(77,"a",7),e._uU(78,"here"),e.qZA(),e._uU(79,".\n"),e.qZA()),2&i&&(e.xp6(18),e.Oqu(t.json),e.xp6(8),e.Oqu(t.interface),e.xp6(6),e.AsE("items is an array of objects. Later down it's used like so: ",t.snippetOne,". This is a group reference. If we created two directories named colors and cities, items would look like this: ",t.snippetTwo,"."),e.xp6(10),e.hij("itemTitle is the value: ",t.snippetThree," shows how it's being used."),e.xp6(4),e.AsE("addNewItem is an array of list category references. ",t.snippetFour,". These are the lists of draggable items. When they're being dragged, they become ",t.snippetFive,""),e.xp6(15),e.Oqu(t.typescript),e.xp6(8),e.Oqu(t.scss))},styles:[".js-drag-drop[_ngcontent-%COMP%]{border-radius:5px;overflow:hidden}.js-drag-drop[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%;display:block}"]})}const h=[{path:"",component:n,children:[{path:"",redirectTo:"",pathMatch:"full"}]}];class o{static#e=this.\u0275fac=function(i){return new(i||o)};static#t=this.\u0275mod=e.oAB({type:o});static#i=this.\u0275inj=e.cJS({imports:[p.Bz.forChild(h),p.Bz]})}var f=a(433);class s{static#e=this.\u0275fac=function(i){return new(i||s)};static#t=this.\u0275mod=e.oAB({type:s});static#i=this.\u0275inj=e.cJS({imports:[m.ez,o,f.u5]})}}}]);