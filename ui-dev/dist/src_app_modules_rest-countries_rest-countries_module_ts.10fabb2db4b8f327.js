"use strict";(self.webpackChunkFrontendDev=self.webpackChunkFrontendDev||[]).push([["src_app_modules_rest-countries_rest-countries_module_ts"],{5747:(g,l,i)=>{i.r(l),i.d(l,{RestCountriesModule:()=>s});var c=i(6895),p=i(9965),t=i(8256);class n{ngOnInit(){this.markup='\n    <div id="countries">\n        <div class="content">\n            <div class="grid" [ngClass]="{ \'no-interaction\': !userInteraction }">\n                <div class="countries-wrapper">\n                    <div class="scroller">\n                        <ul>\n                            <li *ngFor="let item of countriesData; let i = index" (click)="selectItem(i, $event)" class="country-list-item">\n                                {{ item.name.common }}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                \n                \x3c!-- MAP --\x3e\n                <div id="map" leaflet (leafletMapReady)="onMapReady($event)" [leafletOptions]="mapOptions"></div>\n                \n                <div class="country-popup" *ngIf="countryName != null">\n                    <div class="country-name">\n                        <p>{{ countryName }}</p>\n                        <div class="flag">\n                            <img src="{{ flag }}" />\n                        </div>\n                    </div>\n                    <div class="details-body">\n                        <div class="capitalCity">\n                            <p>Capital City:</p>\n                            <p>{{ capitalCity }}</p>\n                        </div>\n                        <div class="nativeName">\n                            <p>Native Name:</p>\n                            <p>{{ nativeName }}</p>\n                        </div>\n                        <div class="population">\n                            <p>Population:</p>\n                            <p>{{ formatNumber(population) }}</p>\n                        </div>\n                        <div class="region">\n                            <p>Region:<br /></p>\n                            <p>{{ geo }}</p>\n                        </div>\n                        <div class="un-member">\n                            <p>UN Member:</p>\n                            <p>{{ unMember === true ? \'Yes\' : \'No\' }}</p>\n                        </div>\n                        <div class="continents">\n                            <p>Continents:</p>\n                            <p>{{ continents[0] }}</p>\n                        </div>\n                        <div class="alternateMaps">\n                            <p>Alternate Maps:</p>\n                            <div *ngIf="alternateMaps != null">\n                                <a href="{{ alternateMaps.googleMaps }}" target="_blank">Google Maps</a>\n                                <a href="{{ alternateMaps.openStreetMaps }}" target="_blank">Open Street Maps</a>\n                            </div>\n                        </div>\n                        <div class="alternateSpellings">\n                            <p>Alternate Spellings:</p>\n                            <div>\n                                <span *ngFor="let alt of alternateSpellings; let i = index">{{i + 1 + \') \' + alt}}</span>\n                            </div>\n                        </div>\n                        <div class="languages">\n                        <p>Languages:</p>\n                        <div>\n                            <span *ngFor="let alt of languages; let i = index">{{i + 1 + \') \' + alt}}</span>\n                        </div>\n                        </div>\n                        <div class="coatOfArms" *ngIf="coatOfArms != undefined">\n                            <p>Coat of Arms:</p>\n                            <div>\n                                <img src="{{ coatOfArms }}" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf="countriesError" class="countries-error">\n                <p>REST Countries API seems to be non responsive.</p>\n            </div>\n        </div>\n    </div>',this.scss="\n    ::ng-deep img.leaflet-marker-icon.leaflet-zoom-animated.leaflet-interactive {\n      width: 35px !important;\n      height: 40px !important;\n    }\n\n    .dev-link {\n      color: #d9a74a;\n      background-color: #313b3f;\n      text-decoration: none;\n      font: normal 13px sans-serif;\n      padding: 4px 5px;\n      border-radius: 3px;\n      position: absolute;\n      top: 10px;\n      right: 10px;\n    }\n\n    #countries {\n      height: 100%;\n      overflow: hidden;\n      border-radius: 6px;\n    }\n\n    .tabs {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      z-index: 999;\n\n      button:first-child {\n        margin-right: 10px;\n      }\n\n      button {\n        border: none;\n        cursor: pointer;\n      }\n    }\n\n    .content {\n      position: relative;\n      height: 100%;\n    }\n\n    .countries-wrapper {\n      background-color: $white;\n      color: #313b3f;\n      position: relative;\n      height: calc(100% - 10px);\n      z-index: 999;\n      overflow-y: auto;\n    }\n\n    .countries-error {\n      background-color: rgba(0, 0, 0, 0.7);\n      position: absolute;\n      top: 0;\n      z-index: 9999;\n      width: 100%;\n      height: 100%;\n      color: white;\n      font: normal 16px sans-serif;\n      display: flex;\n\n      p {\n        margin: auto;\n      }\n    }\n\n    .grid {\n      display: grid;\n      grid-template-columns: 300px auto;\n      position: absolute;\n      height: 100%;\n      width: 100%;\n      z-index: 0;\n    }\n\n    .btn-group {\n      position: absolute;\n      left: 50px;\n      z-index: 999;\n      top: 10px;\n    }\n\n    .map {\n      height: 100%;\n      position: relative;\n    }\n\n    .country-popup {\n      background-color: rgba(255, 255, 255, 0.7);\n      border: 2px solid $oceanBlue;\n      position: absolute;\n      right: 20px;\n      z-index: 999;\n      bottom: 10px;\n      border-radius: 5px;\n      box-shadow: -2px 2px 8px 1px rgb(0 0 0 / 40%);\n      transform: translateX(10px);\n      width: 325px;\n      max-height: 540px;\n      overflow: auto;\n    }\n\n    .country-name {\n      display: grid;\n      grid-template-columns: calc(100% - 70px) 60px;\n      align-items: center;\n      width: 100%;\n      font: bold 14px/21px sans-serif;\n      padding: 5px;\n      color: $oceanBlue;\n      background-color: $white;\n      margin: 0;\n    }\n\n    .details-body {\n      background-color: $white;\n      display: grid;\n      padding: 5px;\n      grid-template-columns: 100%;\n      grid-row-gap: 2px;\n    }\n\n    .data-imagery {\n      display: grid;\n      grid-template-columns: repeat(2, 50%);\n    }\n\n    .coatOfArms {\n      font: normal 13px/21px sans-serif;\n      margin-top: 5px;\n\n      p {\n        margin: 0;\n      }\n\n      p + div {\n        max-width: 140px;\n        margin: 0 auto;\n      }\n\n      div {\n        max-width: 175px;\n        margin: 0 auto;\n        img { width: 100%; }\n      }\n    }\n\n    .flag {\n      max-width: 60px;\n      font: normal 13px sans-serif;\n      display: flex;\n      img {\n        margin: auto;\n        width: 100%;\n      }\n    }\n\n    .capitalCity,\n    .nativeName,\n    .population,\n    .region {\n      font: normal 13px/21px sans-serif;\n      display: flex;\n\n      p { margin: 0; }\n\n      p:first-child { margin-right: 5px; }\n    }\n\n    .un-member,\n    .continents {\n      font: normal 13px/21px sans-serif;\n      display: flex;\n      grid-column-gap: 5px;\n      p { margin: 0; }\n    }\n\n    .alternateMaps {\n      font: normal 13px/21px sans-serif;\n      overflow: auto;\n\n      > p {\n        float: left;\n        margin: 0;\n      }\n\n      > div {\n        display: flex;\n        margin-left: 5px;\n        float: left;\n        grid-column-gap: 10px;\n\n        a {\n          color: #313b3f;\n          text-decoration: underline;\n        }\n      }\n    }\n\n    .alternateSpellings,\n    .languages {\n      font: normal 13px/21px sans-serif;\n      p {\n        margin: 0;\n      }\n\n      div {\n        span {\n          display: block;\n          margin-left: 15px;\n        }\n      }\n    }\n\n    .scroller {\n      overflow: auto;\n      height: 100%;\n\n      ul {\n        list-style-type: none;\n        font: normal 14px sans-serif;\n        padding: 0;\n        margin: 0;\n\n        .country-list-item {\n          padding: 7px 0 7px 12px;\n          cursor: pointer;\n          color: #313b3f;\n\n          &:hover {\n            background-color: #313b3f;\n            color: #d9a74a;\n          }\n        }\n      }\n    }\n\n    #map {\n      height: auto;\n      position: relative;\n    }",this.typescript="\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import * as L from 'leaflet';\n    import { icon, latLng, Map, MapOptions, Marker, tileLayer, map } from 'leaflet';\n    import { RESTCountryModel } from './rest-countries.model';\n\n    @Component({\n      selector: 'my-app',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss'],\n    })\n    export class AppComponent implements OnInit {\n      alternateSpellings: Array<{ index: string }>;\n      countriesData: RESTCountryModel[] = [];\n      userInteraction: boolean = false;\n      countriesError: boolean = false;\n      borderingCountries: any;\n      mapOptions: MapOptions;\n      languages: string[] = [];\n      continents: string[] = [];\n      countryName: string;\n      capitalCity: string;\n      unMember: boolean;\n      coatOfArms: any;\n      nativeName: string;\n      official: string;\n      population: number;\n      longitude: number;\n      latitude: number;\n      alternateMaps: any;\n      flag: any;\n      map: Map;\n      geo: any;\n\n      constructor(private http: HttpClient) {}\n\n      ngOnInit() {\n        this.http\n          .get<RESTCountryModel[]>('https://restcountries.com/v3.1/all')\n          .subscribe(\n            (data: any) => {\n              this.countriesData = data;\n              this.countriesData.sort(function (a, b) {\n                if (a.name.common < b.name.common) { return -1; }\n                if (a.name.common > b.name.common) { return 1;  }\n                return 0;\n              });\n            },\n            (error) => { this.countriesError = true; }\n          );\n        this.initializeMapOptions();\n      }\n\n      onMapReady(map: Map) { this.map = map; }\n\n      private initializeMapOptions() {\n        this.mapOptions = {\n          center: latLng(38, -97),\n          zoom: 4,\n          layers: [\n            tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n              maxZoom: 18,\n            }),\n          ],\n        };\n      }\n\n      selectItem(i: any, e: any) {\n        var name = e.target.innerHTML;\n        Object.keys(this.countriesData).map(function (index: any, val: any) {\n          if (index.name === name) { i = val; }\n        });\n\n        this.setMarker(i);\n        this.setDetails(i);\n      }\n\n      setMarker(i: any) {\n        this.userInteraction = true;\n        this.longitude = this.countriesData[i].latlng[0];\n        this.latitude = this.countriesData[i].latlng[1];\n\n        const marker = L.marker([this.longitude, this.latitude]).setIcon(\n          icon({\n            iconSize: [25, 41],\n            iconAnchor: [13, 41],\n            iconUrl: './assets/icon.png',\n          })\n        );\n\n        this.map.setView([this.longitude, this.latitude], 5);\n        this.map.invalidateSize();\n        this.markerHandler(marker);\n      }\n\n      markerHandler(pin: any) {\n        pin.addTo(this.map).addEventListener('click', function (event: any) {});\n      }\n\n      setDetails(i: number) {\n        this.countryName = this.countriesData[i].name.official;\n        this.countriesData[i].hasOwnProperty('capital')\n          ? (this.capitalCity = this.countriesData[i].capital[0])\n          : (this.capitalCity = 'Not Listed');\n        this.flag = this.countriesData[i].flags.png;\n        this.nativeName = this.countriesData[i].name.common;\n        this.alternateSpellings = this.countriesData[i].altSpellings;\n        this.population = this.countriesData[i].population;\n        this.alternateMaps = this.countriesData[i].maps;\n        this.geo = this.countriesData[i].region;\n        this.unMember = this.countriesData[i].unMember;\n        this.coatOfArms = this.countriesData[i].coatOfArms.png;\n        this.continents = this.countriesData[i].continents;\n\n        this.languages = [];\n        for (let val in this.countriesData[i].languages) {\n          this.languages.push(this.countriesData[i].languages[val]);\n        }\n      }\n\n      formatNumber(i: number) {\n        var nf = Intl.NumberFormat(),\n          x = this.population,\n          result = nf.format(x);\n        return result;\n      }\n    }",this.model="\n    export class RESTCountryModel {\n        public altSpellings?: Array<{ index: string }>;\n        public area?: number;\n        public capital?: string;\n        public coatOfArms?: { png: string };\n        public continents?: string[];\n        public flags?: { png: string };\n        public landlocked?: boolean;\n        public languages?: { index: string };\n        public latlng?: number;\n        public maps?: { googleMaps: string; openStreetMaps: string };\n        public name?: { common: string; official: string };\n        public population?: number;\n        public region?: string;\n        public unMember?: true;\n      \n        constructor(\n          altSpellings: Array<{ index: string }>,\n          area: number,\n          coatOfArms: { png: string },\n          continents: string[],\n          flags: { png: string },\n          landlocked: boolean,\n          languages: { index: string },\n          latlng: number,\n          maps: { googleMaps: string; openStreetMaps: string },\n          name: { common: string; official: string },\n          population: number,\n          region: string,\n          unMember: true\n        ) {\n          (this.altSpellings = altSpellings),\n            (this.area = area),\n            (this.capital = this.capital),\n            (this.coatOfArms = coatOfArms),\n            (this.continents = this.continents),\n            ((this.flags = flags),\n            (this.landlocked = landlocked),\n            (this.languages = languages),\n            (this.latlng = this.latlng),\n            (this.maps = maps),\n            (this.name = name),\n            (this.population = population),\n            (this.region = region),\n            (this.unMember = unMember));\n        }\n      }",this.module="\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { FormsModule } from '@angular/forms';\n    import { AppComponent } from './app.component';\n    import { HttpClientModule } from '@angular/common/http';\n    import { LeafletModule } from '@asymmetrik/ngx-leaflet';\n\n    @NgModule({\n      imports: [BrowserModule, HttpClientModule, FormsModule, LeafletModule],\n      declarations: [AppComponent],\n      bootstrap: [AppComponent],\n    })\n    export class AppModule {}"}static#t=this.\u0275fac=function(e){return new(e||n)};static#e=this.\u0275cmp=t.Xpm({type:n,selectors:[["app-rest-countries"]],decls:108,vars:5,consts:[[1,"rest-intro"],[1,"snippet-description"],["href","https://leafletjs.com/","target","_blank"],["href","https://restcountries.com/","target","_blank"],[1,"rest-countries","element-shadow"],["src","assets/components-grid/rest-countries-L.jpg"],[1,"snippet-description","item-margin"],[1,"code-preview"],[1,"snippet-description","item-last-child"],["href","https://stackblitz.com/edit/rest-countries-leaflet-map?file=src%2Fapp%2Fapp.component.ts","target","_blank"]],template:function(e,a){1&e&&(t.TgZ(0,"div",0)(1,"div",1),t._uU(2," REST Countries is a neat endpoint that provides the list of countries shown in the selection pane. Additionally, it provides capital names, flag imagery, population, native and region names. It also provides geographical data. The geographical data is then coupled with Leaflet's mapping abilities. The endpoints' additional data is shared with Leaflet on click."),t._UZ(3,"br")(4,"br"),t._uU(5,"\xa0"),t.TgZ(6,"a",2),t._uU(7,"Leaflet"),t.qZA(),t._uU(8," is an interactive mapping solution akin to Google Maps, but provides devs an onslaught of options. And unlike Google Maps, there's no need for a Gmail account and API key. Only caveat is Leaflet is a library that takes some getting used to."),t._UZ(9,"br")(10,"br"),t._uU(11," The below app extracts the "),t.TgZ(12,"a",3),t._uU(13,"REST Countries"),t.qZA(),t._uU(14," country geographical output and sends it to Leaflet. In turn, we're able to quickly cycle through the countries list, locating the central point of each selection. The retrieved countries are however unordered so I added sort functionality."),t._UZ(15,"br")(16,"br"),t._uU(17," One challenge I did encounter was how to fit all the data in the UI, in every screen size. There's simply so many items to display with little screen real estate. Written in TypeScript. "),t.qZA()(),t.TgZ(18,"div",4),t._UZ(19,"img",5),t.qZA(),t.TgZ(20,"div",6),t._uU(21," rest-countries.model.ts "),t.TgZ(22,"ul")(23,"li"),t._uU(24,"This file declares the data we receive from the REST Countries endpoint."),t.qZA(),t.TgZ(25,"li"),t._uU(26,"? marks define, optional. Followed by their data types."),t.qZA(),t.TgZ(27,"li"),t._uU(28,"There's several TypeScript formats I've seen in developer environments, but this is the format I chose for this project."),t.qZA()()(),t.TgZ(29,"div",7)(30,"pre"),t._uU(31,"\t\t    "),t.TgZ(32,"code"),t._uU(33),t.qZA(),t._uU(34,"\n\t    "),t.qZA()(),t.TgZ(35,"div",6),t._uU(36," app.component.ts "),t.TgZ(37,"ul")(38,"li"),t._uU(39,"Notice the third and fourth Leaflet import statements."),t.qZA(),t.TgZ(40,"li"),t._uU(41,"mapOptions sets the center point of the map once it loads. It also sets the zoom degree and the type of tile layer."),t.qZA(),t.TgZ(42,"li"),t._uU(43,"countryName, capitalCity, nativeName, population, longitude, latitude, and flag capture the endpoints keys."),t.qZA(),t.TgZ(44,"li"),t._uU(45,"countriesError is a boolean that's used in the event REST Countries fails."),t.qZA(),t.TgZ(46,"li"),t._uU(47,"countriesData holds the full list of countries."),t.qZA(),t.TgZ(48,"li"),t._uU(49,"Below this.countriesData = data, the list is sorted alphabetically."),t.qZA(),t.TgZ(50,"li"),t._uU(51,"Map options are initialized via this.initializeMapOptions();"),t.qZA(),t.TgZ(52,"li"),t._uU(53,"onMapReady is a Leaflet map method related to initialization."),t.qZA(),t.TgZ(54,"li"),t._uU(55,"selectItem is the countries click event."),t.qZA(),t.TgZ(56,"li"),t._uU(57,"setDetails updates the data in the countries popup."),t.qZA(),t.TgZ(58,"li"),t._uU(59,"formatNumber formats the population."),t.qZA()()(),t.TgZ(60,"div",7)(61,"pre"),t._uU(62,"\t\t    "),t.TgZ(63,"code"),t._uU(64),t.qZA(),t._uU(65,"\n\t    "),t.qZA()(),t.TgZ(66,"div",6),t._uU(67," app.component.html "),t.TgZ(68,"ul")(69,"li"),t._uU(70,"Loop over the countries data while utilizing the index, as a param in the neighboring event handler."),t.qZA(),t.TgZ(71,"li"),t._uU(72,"The actual map is simply one line."),t.qZA(),t.TgZ(73,"li"),t._uU(74,"All that's left is the countries popup."),t.qZA(),t.TgZ(75,"li"),t._uU(76,"Followed by the UI error shall the endpoint become unavailable."),t.qZA()()(),t.TgZ(77,"div",7)(78,"pre"),t._uU(79,"\t\t"),t.TgZ(80,"code"),t._uU(81),t.qZA(),t._uU(82,"\n\t"),t.qZA()(),t.TgZ(83,"div",6),t._uU(84," app.component.scss\n"),t.qZA(),t.TgZ(85,"div",7)(86,"pre"),t._uU(87,"\t\t    "),t.TgZ(88,"code"),t._uU(89),t.qZA(),t._uU(90,"\n\t    "),t.qZA()(),t.TgZ(91,"div",6),t._uU(92," app.module.ts "),t.TgZ(93,"ul")(94,"li"),t._uU(95,"Nearly everything here is pretty routine aside from the Leaflet import."),t.qZA()()(),t.TgZ(96,"div",7)(97,"pre"),t._uU(98,"\t\t"),t.TgZ(99,"code"),t._uU(100),t.qZA(),t._uU(101,"\n\t"),t.qZA()(),t._UZ(102,"br"),t.TgZ(103,"div",8),t._uU(104," There's literally endless options as to how something like this can be laid out and made functional. Regardless, the ultimate goal was to create a relatively simple rendition of two APIs playing well together. Check out the REST Countries "),t.TgZ(105,"a",9),t._uU(106,"code sample here"),t.qZA(),t._uU(107,".\n"),t.qZA()),2&e&&(t.xp6(33),t.Oqu(a.model),t.xp6(31),t.Oqu(a.typescript),t.xp6(17),t.Oqu(a.markup),t.xp6(8),t.Oqu(a.scss),t.xp6(11),t.Oqu(a.module))},styles:["img.leaflet-marker-icon.leaflet-zoom-animated.leaflet-interactive{width:35px!important;height:40px!important}.rest-intro[_ngcontent-%COMP%]{margin-bottom:30px}.rest-countries[_ngcontent-%COMP%]{max-width:1000px;border-radius:6px;margin:0 auto}.rest-countries[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%}#countries[_ngcontent-%COMP%] > .snippet-description[_ngcontent-%COMP%]:first-child{columns:2}.content[_ngcontent-%COMP%]{position:relative;height:calc(100vh - 195px)}.countries-wrapper[_ngcontent-%COMP%]{background-color:#fff;color:#313b3f;position:relative;height:calc(100% - 10px);z-index:999}.details-body[_ngcontent-%COMP%]{background-color:#fff;display:grid;padding:5px;grid-template-columns:100%;grid-row-gap:2px}.data-imagery[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(2,50%)}@media screen and (max-width: 992px){#countries[_ngcontent-%COMP%] > .snippet-description[_ngcontent-%COMP%]:first-child{columns:1}#countries[_ngcontent-%COMP%]   .snippet-description[_ngcontent-%COMP%]{margin-bottom:35px;columns:1}}@media screen and (max-width: 500px){#countries[_ngcontent-%COMP%]   .snippet-description[_ngcontent-%COMP%]{margin-bottom:10px}}"]})}const u=[{path:"",component:n}];class o{static#t=this.\u0275fac=function(e){return new(e||o)};static#e=this.\u0275mod=t.oAB({type:o});static#i=this.\u0275inj=t.cJS({imports:[p.Bz.forChild(u),p.Bz]})}var d=i(2271),m=i(433);class s{ngOnInit(){}static#t=this.\u0275fac=function(e){return new(e||s)};static#e=this.\u0275mod=t.oAB({type:s});static#i=this.\u0275inj=t.cJS({imports:[c.ez,d.m,m.u5,o]})}}}]);